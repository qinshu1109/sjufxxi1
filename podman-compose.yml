# Podman Compose配置 - sjufxxi项目核心服务
# 基于Dify docker-compose.yaml适配rootless Podman
# 版本: 1.0 - 核心服务阶段

version: '3.8'

services:
  # ===========================================
  # 核心应用服务
  # ===========================================
  
  api:
    image: langgenius/dify-api:1.4.2
    restart: always
    environment:
      # 基础配置
      CONSOLE_API_URL: ${CONSOLE_API_URL:-}
      CONSOLE_WEB_URL: ${CONSOLE_WEB_URL:-}
      SERVICE_API_URL: ${SERVICE_API_URL:-}
      APP_API_URL: ${APP_API_URL:-}
      APP_WEB_URL: ${APP_WEB_URL:-}
      FILES_URL: ${FILES_URL:-}
      
      # 日志配置
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-/app/logs/server.log}
      
      # 数据库配置
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-difyai123456}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_DATABASE: ${DB_DATABASE:-dify}
      
      # Redis配置
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-difyai123456}
      
      # 向量数据库配置
      VECTOR_STORE: ${VECTOR_STORE:-weaviate}
      WEAVIATE_ENDPOINT: ${WEAVIATE_ENDPOINT:-http://weaviate:8080}
      WEAVIATE_API_KEY: ${WEAVIATE_API_KEY:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
      
      # 安全配置
      SECRET_KEY: ${SECRET_KEY:-sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U}
      
    volumes:
      - app_storage:/app/api/storage
    networks:
      - app-network
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    image: langgenius/dify-api:1.4.2
    restart: always
    environment:
      # 继承API相同的环境变量
      CONSOLE_API_URL: ${CONSOLE_API_URL:-}
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-difyai123456}
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_DATABASE: ${DB_DATABASE:-dify}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-difyai123456}
      VECTOR_STORE: ${VECTOR_STORE:-weaviate}
      WEAVIATE_ENDPOINT: ${WEAVIATE_ENDPOINT:-http://weaviate:8080}
      WEAVIATE_API_KEY: ${WEAVIATE_API_KEY:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
      SECRET_KEY: ${SECRET_KEY:-sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U}
      
      # Worker特定配置
      MODE: ${MODE:-worker}
      CELERY_WORKER_CLASS: ${CELERY_WORKER_CLASS:-gevent}
      
    volumes:
      - app_storage:/app/api/storage
    networks:
      - app-network
    depends_on:
      - db
      - redis
    command: ["celery", "-A", "app.celery", "worker", "-P", "gevent", "-c", "1", "--loglevel=INFO"]

  web:
    image: langgenius/dify-web:1.4.2
    restart: always
    environment:
      CONSOLE_API_URL: ${CONSOLE_API_URL:-}
      APP_API_URL: ${APP_API_URL:-}
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED:-0}
    networks:
      - app-network
    depends_on:
      - api

  # ===========================================
  # 数据存储服务
  # ===========================================
  
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      PGUSER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456}
      POSTGRES_DB: ${POSTGRES_DB:-dify}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "dify"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    restart: always
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD:-difyai123456}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --requirepass ${REDIS_PASSWORD:-difyai123456}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # 向量数据库服务
  # ===========================================
  
  weaviate:
    image: semitechnologies/weaviate:1.25.5
    restart: always
    volumes:
      - weaviate_data:/var/lib/weaviate
    environment:
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-false}
      DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_DEFAULT_VECTORIZER_MODULE:-none}
      AUTHENTICATION_APIKEY_ENABLED: ${WEAVIATE_AUTHENTICATION_APIKEY_ENABLED:-true}
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: ${WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # 网关服务
  # ===========================================
  
  nginx:
    image: nginx:latest
    restart: always
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_}
      NGINX_PORT: ${NGINX_PORT:-80}
    ports:
      - "${EXPOSE_NGINX_PORT:-80}:80"
    networks:
      - app-network
    depends_on:
      - api
      - web
      - dbgpt

  # ===========================================
  # DB-GPT AWEL 服务
  # ===========================================

  dbgpt:
    build:
      context: ./external/dbgpt
      dockerfile: Containerfile
      args:
        PYTHON_VERSION: "3.11"
        EXTRAS: "base,proxy_openai,rag,storage_chromadb,hf,dbgpts"
        VERSION: "latest"
    restart: always
    environment:
      # 基础配置
      DBGPT_HOST: ${DBGPT_HOST:-0.0.0.0}
      DBGPT_PORT: ${DBGPT_PORT:-5000}
      DBGPT_WEB_PORT: ${DBGPT_WEB_PORT:-3000}
      DBGPT_LOG_LEVEL: ${DBGPT_LOG_LEVEL:-INFO}

      # DeepSeek API 配置
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY:-}
      PROXY_API_KEY: ${DEEPSEEK_API_KEY:-}
      PROXY_API_BASE: ${PROXY_API_BASE:-https://api.deepseek.com/v1}
      LLM_MODEL: ${LLM_MODEL:-deepseek_proxyllm}

      # 数据库配置
      LOCAL_DB_TYPE: ${LOCAL_DB_TYPE:-duckdb}
      LOCAL_DB_PATH: ${LOCAL_DB_PATH:-/app/data/analytics.duckdb}
      POSTGRES_URL: ${POSTGRES_URL:-postgresql://postgres:difyai123456@db:5432/dify}

      # 向量存储配置
      VECTOR_STORE_TYPE: ${VECTOR_STORE_TYPE:-Chroma}
      CHROMA_PERSIST_PATH: ${CHROMA_PERSIST_PATH:-/app/data/chroma}

      # 安全配置
      DBGPT_SECURITY_ENABLE_SQL_WHITELIST: ${DBGPT_SECURITY_ENABLE_SQL_WHITELIST:-true}
      DBGPT_SECURITY_MAX_QUERY_TIME: ${DBGPT_SECURITY_MAX_QUERY_TIME:-30}

    ports:
      - "${DBGPT_PORT:-5000}:5000"
      - "${DBGPT_WEB_PORT:-3000}:3000"
    volumes:
      - dbgpt_data:/app/data
      - dbgpt_logs:/app/logs
      - dbgpt_config:/app/config
      - ./data/db/analytics.duckdb:/app/data/analytics.duckdb:ro
    networks:
      - app-network
    depends_on:
      - db
      - redis
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# ===========================================
# 网络定义 - 修复podman-compose兼容性
# ===========================================
networks:
  # 显式定义default网络 - 解决podman-compose要求
  default:
    driver: bridge
    
  # 主应用网络
  app-network:
    driver: bridge

# ===========================================
# 卷定义 - rootless兼容
# ===========================================
volumes:
  postgres_data:
    driver: local

  redis_data:
    driver: local

  weaviate_data:
    driver: local

  app_storage:
    driver: local

  dbgpt_data:
    driver: local

  dbgpt_logs:
    driver: local

  dbgpt_config:
    driver: local
